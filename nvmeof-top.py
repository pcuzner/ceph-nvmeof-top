#!/usr/bin/env python3
import sys
import argparse
from nvmeof_top import NVMeoFTop
from nvmeof_top.grpc import GatewayClient
from nvmeof_top.utils import valid_nqn, certs_ok
import nvmeof_top.defaults as DEFAULT
import logging

logging.basicConfig(
    filename='nvmeof-top.log',
    filemode='w',
    format='%(asctime)s - %(levelname)-8s - %(name)s.%(funcName)s - %(msg)s')


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("--delay", "-d", type=int, default=DEFAULT.delay, help=f"Refresh interval (secs) [{DEFAULT.delay}]")
    parser.add_argument("--batch", "-b", action='store_true', default=False, help="Run in batch mode with output returned to stdout")
    parser.add_argument("--demo", type=int, help="Run in demo mode with 'n' rows of autogenerated data")
    parser.add_argument("--subsystem", "-n", type=valid_nqn, help="NQN of the subsystem to monitor (REQUIRED)")
    parser.add_argument("--server-addr", "-a", type=str, help="Gateway server IP address", default=DEFAULT.server_addr)
    parser.add_argument("--server-port", "-p", type=int, help="Gateway server control path port", default=DEFAULT.server_port)
    parser.add_argument("--with-timestamp", action='store_true', default=False, help="Prefix namespaces statistics with a timestamp in batch mode")
    parser.add_argument("--no-headings", action='store_true', default=False, help="Omit column headings in batch mode")
    parser.add_argument("--count", "-c", type=int, help="Number of interations for stats gathering")
    parser.add_argument("--log-level", type=str, choices=['debug', 'info', 'warning', 'error', 'critical'], default=DEFAULT.log_level, help=f"Logging level [{DEFAULT.log_level}]")
    parser.add_argument("--server-cert", type=str, default='', help='Path to server cert (root certificate)')
    parser.add_argument("--client-cert", type=str, default='', help='Path to client cert')
    parser.add_argument("--client-key", type=str, default='', help='Path to client key')
    parser.add_argument("--ssl-config", type=str, default='', help='YAML file that contains the certs and keys inline')
    args = parser.parse_args()

    return args


if __name__ == "__main__":
    args = parse_arguments()

    if args.demo:
        args.server_addr = '192.168.1.1'
        args.subsystem = 'nqn.2016-06.io.spdk:cnode1'

    if not args.server_addr or not args.server_port:
        print("IP and port required: Either set SERVER_ADDR and SERVER_PORT environment variables or provide them as parameters")
        sys.exit(4)

    if not args.subsystem:
        print("You must provide a subsystem NQN")
        sys.exit(4)

    ok, msg = certs_ok(args)
    if not ok:
        print(msg)
        sys.exit(8)

    # set the root loggers default log level
    logging.getLogger().setLevel(args.log_level.upper())

    gateway_client = GatewayClient(
        server_addr=args.server_addr,
        server_port=args.server_port,
        server_cert_path=args.server_cert,
        client_cert_path=args.client_cert,
        client_key_path=args.client_key,
        ssl_config=args.ssl_config
    )
    gateway_client.connect()

    app = NVMeoFTop(args, gateway_client)

    app.run()
